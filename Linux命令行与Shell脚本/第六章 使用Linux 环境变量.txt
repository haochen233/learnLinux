	Linux环境变量能帮你提升Linux shell。很多程序和脚本都通过环境变量来
获取系统信息，存储临时数据和配置信息。在Linux系统上有很多地方设置环境变
量。
	
	逐步了解Linux环境变量：他们存储在哪里，怎么使用，以及怎么创建自己的
环境变量。最后以数组变量的用法做结。
	
	6.1 什么是环境变量
		bash shell用一个叫做环境变量（environment variable）的特性来存储
	有关shell会话和工作环境。
		这项特性允许你在内存中存储数据，以便程序或shell运行中的脚本能够
	轻松访问到它们，这也是存储持久数据的一种简便办法。
		在bash shell中，环境变量分为两种：
		1）全局变量
		2）局部变量
		
		6.1.1 全局环境变量
			全局环境变量对于shell会话和所有生成的子shell都是可见的。局部
		变量则只对创建它们的shell可见。
			
			Linux系统在你开始bash会话时就设置了一些全局环境变量，系统环境
		变量基本都是使用全大写字母。以区别于普通环境变量。
			
			要查看全局环境变量，可以使用：
			$env
			或
			$printenv
			
			由于系统为bash shell设置的全局环境变量数目特别多。
			要显示个别环境变量的值
			使用：
			$printenv #变量名  如：HOME
			#不能使用env命令
			
			还可以:
			$echo $HOME
			#在echo命令中，在变量名前加$可以是要显示变量当前的值，而是
		它能够变量作为命令行参数。
			
			如下：
			$ls $HOME
			
		6.1.2 局部环境变量
			局部环境变量只能在定义他们的进程中可见。尽管是局部的，但是
		和全局变量一样重要。
		
			$set
			set命令会显示为某个进程设置的所有环境变量，包括全局、局部、
		用户自定义变量（还会按照字母顺序进行排序）。
		
	6.2 设置用户定义变量
		一旦启动了bash shell，就能创建在这个shell进程内可见的局部变量
	了。可以通过等号给环境变量赋值，值可以是数值或字符串。
		$ echo $my_variable
		
		$ my_variable=hello
		$ echo $my_variable
		hello
		
		现在每次引用my_variable 环境变量的值，只要通过$my_variable引用
	即可。如果需要给变量赋一个含有空格的字符串，必须用单引号来界定字符串
	的首和尾。
		$my_variable='hello world'
		$ echo $my_variable
		hello world
		
		注意：你定义的局部环境变量用的是小写字母。
		坚持用户定义的局部变量使用小写。
		
		记住变量名、等号和值之间煤油空格。
		
		设置了局部变量后，就能在shell进程的任何地方使用它了，但是，如果
	生成了另外一个shell，它在子shell中就不能用了。
		即在哪个shell创建的局部变量，只能在哪个shell里用。
		
		6.2.2 设置全局变量
			全局变量所有shell都能使用。
			创建全局变量的方法，是先创建一个局部变量，然后再把它导出
		到全局环境中。
			这个过程需要export命令来完成，变量名前面不需要啊加$。
			
		$my_variable='hello world'
		$export my_variable
		
		#就成为全局变量了
		
		子shell中修改全局变量的值，并不会影响父shell中该变量的值。
		即使子shell使用export导出该全局变量也没用影响。
		
	6.3 删除环境变量
		可以使用unset变量完成这个操作。使用unset命令引用环境变量时，
	记住不用使用$。
		$unset my_variable
		#成功删除环境变量 my_variable
		
		窍门：如果要用到变量，使用$。如果要操作变量，不使用$。一个例外
	就是使用printenv 查看某个变量，不需要使用$。
		
		在处理全局变量时，如果是在子进程中删除了一个全局变量，这只对子进
	程有效。该全局变量在父进程中依然可用。
			 
			
	6.4	默认的shell环境变量
		
		bash shell支持的Bourne变量
		举几个常见的：
		
		变量		描述
		CDPATH		冒号分隔的目录列表，作为cd命令的搜索路径。
		HOME		当前用户的主目录
		PATH		shell查找命令的目录列表，由冒号':'分隔
		BASH		当前shell实例的全路径名称
		PWD			当前工作目录
		RANDOM		返回一个0~32767的随机数
		TIMEFORAMT	指定了shell的时间格式
	
	6.5 设置PATH环境变量
		当你在shell命令行界面输入一个命令时，shell必须搜索系统来找到
	对应的程序。PATH环境变量定义了用于进行命令和从查找的目录。
	$echo $PATH	
	/home/haochen/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin
	:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

		注意PATH中的目录使用冒号':'分隔。
		如果命令或程序的位置没有包括在PATH变量中，如果不使用绝对路径是
	没法找到。
		比如我go的PATH路径没有设置好，直接使用go run 命令时没有用的，
	因为找不到，所以只能使用绝对路径/home/haochen/go/bin/go run hello.go
	来使用命令了。一定要配置好。
		
		可以把新的搜索目录添加到现有的PATH环境变量中，注意PATH环境变量
	中各个目录之间是用冒号':'分隔的。你只需引用原来的PATH值，然后在加上
	新的搜索目录就可以了。
		例如：
		我安装了go，然后需要配置go的搜索目录，可以如下这么配置：
		PATH=$PATH:/home/haochen/go/bin ,这样就往PATH环境变量中添加了新的
	搜索目录。
		添加后就可以在虚拟目录结构中的任何位置执行程序。
		
		如果希望子shell也能找到你的程序的位置，一定要把修改后的PATH环境
	变量导出。
		
		程序员通常的办法是将单点符也加入PATH环境变量，单点符代表当前目录
		$PATH=$PATH:.
		
		对PATH变量的修改只能持续到退出或重启系统。这种效果并不能持续。
	后面会学到如何永久的保持环境变量的修改成果。
		
	6.6 定位系统环境变量
	接下来的问题时怎么让环境变量的作用持久化。
	在你登入Linux系统	启动一个bash shell时，默认情况下bash会在
几个文件中查找命令。这些文件叫作启动文件或环境文件。
	bash检查的启动文件取决于启动bash shell的方式
	启动bash shell有三种方式：
	1）登录时作为默认登录shell
	2）作为非登录shell的交互式shell
	3）作为运行脚本的非交互式shell
	
		6.6.1 登录shell
			当你登录Linux系统，bash shell会作为登录shell启动，登录shell
		会从五个不同的启动文件里读取命令。
			1）/etc/profile
			2）$HOME/.bash_profile
			3）$HOME/.bashrc
			4）$HOME/.bash_login
			5）$HOME/.profile 
		
		/etc/profile文件是系统上默认的bash shell主启动文件。每个用户
	登录时都会执行这个启动文件。
			另外4个启动文件是针对用户的，可根据个人需求定制。
		
			1、/etc/profile
				是bash shell默认的主启动文件，只要你的登录了Linux系统
			bash就会自动执行/etc/profile启动文件中的命令。
			
				/etc/profile使用到了一个特性：for 语句。它用来迭代
			/etc/profile.d目录下的所有文件。
				供bash shell使用的文件（扩展名为.sh）,供c shell使用的文
			件（扩展名.csh）
			
			2、$HOME目录下启动的文件
				1）$HOME/.bash_profile
				2）$HOME/.bashrc
				3）$HOME/.bash_login
				4）$HOME/.profile 
				
				大多数Linux发行版只用这四个启动文件中的一个到两个
				
				.bash_profile启动文件会先去检查HOME目录中是不是还有
			一个叫做.bashrc的启动文件。如果有的话。会先执行启动文件
			里面的命令。
			
		6.6.2 交互式shell进程
			如果bash shell不是登录时启动的（比如在命令行提示符下敲
		bash命令启动）那么你启动的shell叫做交互式shell。
			如果bash是交互式shell启动的，它就不会访问/etc/profile文
		件，只会检查用户目录下的.bashrc文件。
			该文件作用有两个：（1）查看/etc目录下通用的bashrc文件。
		（2）为用户提供一个定制自己命令别名和私有脚本函数的地方。
		
		6.6.3 非交互式shell
			略。
		6.6.4 环境变量持久化
			对全局变量来说，你可能更倾向于新的或修改过的变量设置放在
		/etc/profile文件中。但这可不是什么好主意。如果你升级了发行版
		，那么这个文件也会跟着更新，那你定制过的所有变量设置可就都没
		有了。
		
			最好是在/etc/profile.d目录中创建一个以.sh结尾的文件。把所
		有新的或修改过的全局变量设置放在这个文件中。
		
			在大多数发行版中，存储个人用户永久性bash shell变量的地方
		是$HOME/.bashrc 文件。这一点适用于所有的shell进程。
		
			比如alias命令设置就不是持久化的，于是可以将自己的alias命令
		设置放在$HOME/.bashrc文件中，使其效果永久化。
		
	6.7 数组变量
		要给某个环境变量设置多个值，可以把值放在括号里，之间用空格隔开
		$mytest=(one two three four five)
		
		$echo $mytest
		#one 只会显示第一个值。
		要引用一个单独的数组元素，就必须用代表它在数组中位置的数值索引值
	索引要方括号括起来。
		$echo ${mytest[2]}
		#three
		
		要显示整个数组，可用星号'*'作用通配符放在方括号中
		$echo ${mytest[*]}
		#one two three four five
		
		与C语言比较相似
		元素赋值
		$mytest[2]=3
		
		还可以使用unset删除元素
		$unset mytest[2]
		#删除第三个元素
		
		$unset mytesst
		#删除整个数组
		
		

